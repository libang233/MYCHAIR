C51 COMPILER V9.01   MOTOR                                                                 02/22/2017 17:27:16 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN .\motor.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE ..\Src\motor.c BROWSE INCDIR(..\Src) DEBUG OBJECTEXT
                    -END PRINT(.\motor.lst) OBJECT(.\motor.obj)

line level    source

   1          // 文件名 ：motor.c
   2          // 作者   : 赵成华 陈统 何立邦
   3          // 日期   : 2017年 2月 17日
   4          
   5          #include "motor.h"
   6          
   7          // 函数名 ：pwm波初始化函数
   8          // 参数   ：无 
   9          // 返回值 ：无
  10          // 注释   : 已调试
  11          
  12          void Init_PWM(void)
  13          {
  14   1                      CCON = 0;                                                                                       //Initial PCA control register
  15   1                                                                                                                                                      //PCA timer stop running
  16   1                                                                                                                                                      //Clear CF flag
  17   1                                                                                                                                                      //Clear all module interrupt flag
  18   1                      CL = 0;                                                                                         //Reset PCA base timer
  19   1                      CH = 0;
  20   1                      CMOD = 0x02;                                                                                    //Set PCA timer clock source as Fosc/2
  21   1                                                                                                                                                      //Disable PCA timer overflow interrupt
  22   1                      CCAP0H = CCAP0L = 0x00;                                                                         //PWM0 port output 50% duty cycle square wave
  23   1                      CCAPM0 = 0x42;                                                                                  //PCA module-0 work in 8-bit PWM mode and no PCA interrupt
  24   1      
  25   1                      CCAP2H = CCAP2L = 0x00;                                                                         //PWM1 port output 0% duty cycle square wave
  26   1                      CCAPM2 = 0x42;                                                                                  //PCA module-1 work in 8-bit PWM mode and no PCA interrupt
  27   1      
  28   1                      CR = 1;                                                                                         //PCA timer start run
  29   1      }
  30          
  31          // 函数名 ：电机初始化函数
  32          // 参数   ：无 
  33          // 返回值 ：无
  34          // 注释   : 已调试
  35          
  36          void Init_Motor(void)  
  37          {
  38   1              myMassage.speed = 55 ;                                                                  // 开机初始化电机pwm值                  
  39   1      }
  40          
  41          // 函数名 ：揉捏函数
  42          // 参数   ：无 
  43          // 返回值 ：无
  44          // 注释   : 已调试
  45          
  46          void kne(void)
  47          {
  48   1              SendMsg[0] = SendMsg[0] | 0x40;
  49   1              SendMsg[0] = SendMsg[0] & ~0x80;
  50   1              SendMsg[1] = SendMsg[1] & ~0x02;
  51   1              
  52   1              CCAP0H = myMassage.speed ;
  53   1              CCAP0L = myMassage.speed ;
  54   1              CCAP2H = 0 ;
C51 COMPILER V9.01   MOTOR                                                                 02/22/2017 17:27:16 PAGE 2   

  55   1              CCAP2L = 0 ;
  56   1      }
  57          
  58          // 函数名 ：捶背敲打函数
  59          // 参数   ：无 
  60          // 返回值 ：无
  61          // 注释   : 已调试
  62          
  63          void per()
  64          {
  65   1              SendMsg[0] = SendMsg[0] | 0x80;
  66   1              SendMsg[0] = SendMsg[0] & ~0x40;
  67   1              SendMsg[1] = SendMsg[1] & ~0x02;
  68   1              CCAP2H = myMassage.speed - DIFFERENT_SPEED ;
  69   1              CCAP2L = myMassage.speed - DIFFERENT_SPEED ;
  70   1              CCAP0H = 0;
  71   1              CCAP0L = 0 ;
  72   1      }
  73          
  74          // 函数名 ：揉拍函数
  75          // 参数   ：无 
  76          // 返回值 ：无
  77          // 注释   : 已调试
  78          
  79          void per_kne()
  80          {
  81   1              SendMsg[1] = SendMsg[1] | 0x02;
  82   1              SendMsg[0] = SendMsg[0] & ~0x80;
  83   1              SendMsg[0] = SendMsg[0] & ~0x40;
  84   1              CCAP2H = myMassage.speed ;
  85   1              CCAP2L = myMassage.speed ;
  86   1              CCAP0H = myMassage.speed ;
  87   1              CCAP0L = myMassage.speed ;
  88   1      }
  89          
  90          // 函数名 ：所有电机都停止
  91          // 参数   ：所需要的实时速度 
  92          // 返回值 ：无
  93          // 注释   : 已调试
  94          
  95          void allMotorsStop(void)
  96          {
  97   1              CCAP0H = 0x00 ;
  98   1              CCAP0L = 0x00 ;
  99   1              CCAP2H = 0x00 ;
 100   1              CCAP2L = 0x00 ;
 101   1              backm_up  = 1 ;
 102   1              backm_dn  = 1 ;
 103   1              upm=1;
 104   1              dnm=1;
 105   1              // sec=0;
 106   1      }
 107          
 108          // 函数名 ：所有电机都继续工作
 109          // 参数   ：无
 110          // 返回值 ：无
 111          // 注释   : 未调试 此函数暂时未添加其他块语句，如果最终代码仍然未添加块语句，也可以将此代码移置主函数
 112          //void allMotorsGoOn(void)
 113          //{
 114          //      switch( mySerial.action_N )
 115          //      {
 116          //              case ATUO_ONE : 
C51 COMPILER V9.01   MOTOR                                                                 02/22/2017 17:27:16 PAGE 3   

 117          //                              myEvnt.Bit.IsAuto_One = true ;                                          // 申请自动模式1
 118          //                      break ;
 119          //              
 120          //              case ATUO_TWO : 
 121          //                              myEvnt.Bit.IsAuto_Two = true ;                                          // 申请自动模式2
 122          //                      break ;
 123          //              
 124          //              case ATUO_THREE : 
 125          //                              myEvnt.Bit.IsAuto_Three = true ;                                        // 申请自动模式3
 126          //                      break ;
 127          //              
 128          //              case PER_KNE :
 129          //                              myEvnt.Bit.IsPerKne = true ;                                    // 申请同时按摩和捶背
 130          //                  break ;
 131          //              
 132          //              case KNE :
 133          //                              myEvnt.Bit.IsKne = true ;                                                       // 申请揉捏
 134          //                      break ;
 135          //              
 136          //              case PER :
 137          //                              myEvnt.Bit.IsPer = true ;                                                       // 申请捶背
 138          //                      break ;
 139          //              
 140          //              default : break ;
 141          //      }
 142          //}
 143          
 144          
 145          // 函数名 ：调整宽度
 146          // 参数   ：无 
 147          // 返回值 ：无
 148          // 注释   : 已调试
 149          
 150          void ChangeWidth(void)
 151          {
 152   1          u8 Last_AngleCount;
 153   1          Last_AngleCount = myMassage.AngleCount ;
 154   1              
 155   1          if(Last_AngleCount<5)
 156   1          {
 157   2                   while( myMassage.AngleCount < Last_AngleCount + 3)
 158   2                       {
 159   3                              CCAP0H = WiDTH_SPEED;
 160   3                              CCAP0L = WiDTH_SPEED;
 161   3                       }
 162   2                      
 163   2                      CCAP0H = 0;
 164   2                      CCAP0L = 0;
 165   2              }
 166   1              else
 167   1              {       
 168   2                  while( myMassage.AngleCount != 0)
 169   2                  {
 170   3                              CCAP0H = WiDTH_SPEED ; 
 171   3                              CCAP0L = WiDTH_SPEED ;
 172   3                      }
 173   2                      
 174   2                  CCAP0H = 0;
 175   2                      CCAP0L = 0;
 176   2              }   
 177   1      }
 178          
C51 COMPILER V9.01   MOTOR                                                                 02/22/2017 17:27:16 PAGE 4   

 179          // 函数名 ：自动模式1
 180          // 参数   ：无 
 181          // 返回值 ：无
 182          
 183          void auto_one(void)
 184          {
 185   1          switch(myMassage.autoNum)
 186   1              {
 187   2                  case 0x00:
 188   2                           myEvnt.Bit.IsAllMotorsStop = true;
 189   2                               if(upCheck)
 190   2                               {
 191   3                                   upm = 0;
 192   3                               }
 193   2                               else
 194   2                               {
 195   3                                   upm = 1;
 196   3                                   myMassage.autoNum = 0x01;
 197   3                               }
 198   2                               break;
 199   2               case 0x01:
 200   2                           if(dnCheck)
 201   2                               {
 202   3                                   dnm = 0;
 203   3                                       myMassage.speed = INIT_SPEED;
 204   3                               myEvnt.Bit.IsPer = true; 
 205   3                               }
 206   2                               else
 207   2                               {
 208   3                                   dnm = 1;
 209   3                                       myEvnt.Bit.IsAllMotorsStop = true;
 210   3                                       myMassage.autoNum = 0x02;
 211   3                               }
 212   2                            
 213   2                               break; 
 214   2                       case 0x02 :
 215   2                           if( true == myEvnt.Bit.IsAutoBegin)
 216   2                               {
 217   3                                       myEvnt.Bit.IsChangeWidth = true;
 218   3                                       myMassage.nowTime[0] = myTime.Counter[2];
 219   3                                       myMassage.nowTime[1] = myTime.Display;
 220   3                                       myEvnt.Bit.IsAutoBegin = false;
 221   3                               }
 222   2                               else
 223   2                               {
 224   3                                   myMassage.speed = HIGH_SPEED;
 225   3                                       myEvnt.Bit.IsPer = true;
 226   3                                   myMassage.DTime = myTime.Counter[2] - myMassage.nowTime[0] + ( myMassage.nowTime[1] - myTime.Displ
             -ay) * 60;
 227   3                                   if( myMassage.DTime >= 5)
 228   3                                       {
 229   4                                           myEvnt.Bit.IsAllMotorsStop = true;
 230   4                                               myEvnt.Bit.IsAutoBegin = true;
 231   4                                               myMassage.autoNum = 0x03;
 232   4                                       }
 233   3                                   
 234   3                               }
 235   2                               break;
 236   2      
 237   2                   case 0x03:
 238   2                           if(upCheck)
 239   2                               {
C51 COMPILER V9.01   MOTOR                                                                 02/22/2017 17:27:16 PAGE 5   

 240   3                                   upm = 0;   
 241   3                               }
 242   2                               else
 243   2                               {
 244   3                                       myMassage.autoNum = 0x04;
 245   3                               }
 246   2                               break;
 247   2          }    
 248   1                             
 249   1      }
 250          
 251          // 函数名 ：自动模式1
 252          // 参数   ：无 
 253          // 返回值 ：无
 254          
 255          void auto_two(void)
 256          {
 257   1           switch(myMassage.autoNum)
 258   1               {
 259   2                   case 0x00:
 260   2      
 261   2                           myMassage.CycleUpDown = 0;
 262   2                               myEvnt.Bit.IsAutoBegin = false;
 263   2                               dnm = 0;
 264   2                               myMassage.autoNum = 0x01;
 265   2                               break;
 266   2      
 267   2                   case 0x01:
 268   2                           
 269   2                               if( 10 <= myMassage.CycleUpDown)
 270   2                               {
 271   3                                   dnm = 1;
 272   3                               }
 273   2                               break;
 274   2      
 275   2                       
 276   2                               
 277   2               }
 278   1      }
 279          
 280          
 281          void reset(void)  
 282          {
 283   1              
 284   1              if(upCheck)                                                             // 没有达到最顶端，初始化是要达到最顶端
 285   1              {
 286   2                      upm = 0;                                                                        // 向上运动直到到顶
 287   2                      myEvnt.Bit.IsReset_F = true ;
 288   2              }
 289   1              else
 290   1              {
 291   2                  upm = 1;
 292   2                      
 293   2              }
 294   1      
 295   1      
 296   1              
 297   1              
 298   1      }
 299          
 300          
 301                          
C51 COMPILER V9.01   MOTOR                                                                 02/22/2017 17:27:16 PAGE 6   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    377    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
